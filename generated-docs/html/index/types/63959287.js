// This file was generated by purescript-docs-search
window.DocsSearchTypeIndex["63959287"] = [{"values":[{"sourceSpan":{"start":[152,1],"name":".spago/halogen-vdom/v6.1.3/src/Halogen/VDom/Util.purs","end":[153,36]},"score":1,"packageInfo":{"values":["halogen-vdom"],"tag":"Package"},"name":"parentNode","moduleName":"Halogen.VDom.Util","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"TypeConstructor","contents":[["Web","DOM","Internal","Types"],"Node"]}]},{"tag":"TypeConstructor","contents":[["Web","DOM","Internal","Types"],"Node"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[47,1],"name":".spago/halogen/v5.1.1/src/Halogen/HTML.purs","end":[47,32]},"score":0,"packageInfo":{"values":["halogen"],"tag":"Package"},"name":"PlainHTML","moduleName":"Halogen.HTML","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Halogen","HTML","Core"],"HTML"]},{"tag":"TypeConstructor","contents":[["Data","Void"],"Void"]}]},{"tag":"TypeConstructor","contents":[["Data","Void"],"Void"]}]},"arguments":[]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":"A type useful for a chunk of HTML with no slot-embedding or query-raising.\n\nOften a polymorphic usage of `HTML` is good enough for this, but sometimes\nit's useful to have a type like this (and accompanying coercion) when doing\nthings like creating components that accept a chunk of HTML as part of\ntheir configuration.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[184,1],"name":".spago/aff/v5.1.2/src/Effect/Aff.purs","end":[184,25]},"score":5,"packageInfo":{"values":["aff"],"tag":"Package"},"name":"joinFiber","moduleName":"Effect.Aff","info":{"values":[{"type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Effect","Aff"],"Fiber"]},{"tag":"TypeConstructor","contents":[["Effect","Aff"],"Aff"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Blocks until the fiber completes, yielding the result. If the fiber\nthrows an exception, it is rethrown in the current fiber.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[48,1],"name":".spago/aff/v5.1.2/src/Effect/Aff/Compat.purs","end":[48,37]},"score":5,"packageInfo":{"values":["aff"],"tag":"Package"},"name":"fromEffectFnAff","moduleName":"Effect.Aff.Compat","info":{"values":[{"type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Effect","Aff","Compat"],"EffectFnAff"]},{"tag":"TypeConstructor","contents":[["Effect","Aff"],"Aff"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Lift a FFI definition into an `Aff`. `EffectFnAff` makes use of `EffectFn` so\n`Effect` thunks are unnecessary. A definition might follow this example:\n\n```javascript\nexports._myAff = function (onError, onSuccess) {\n  var cancel = doSomethingAsync(function (err, res) {\n    if (err) {\n      onError(err);\n    } else {\n      onSuccess(res);\n    }\n  });\n  return function (cancelError, onCancelerError, onCancelerSuccess) {\n    cancel();\n    onCancelerSuccess();\n  };\n};\n```\n\n```purescript\nforeign import _myAff :: EffectFnAff String\n\nmyAff :: Aff String\nmyAff = fromEffectFnAff _myAff\n````\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[17,1],"name":".spago/aff/v5.1.2/src/Effect/Aff/Compat.purs","end":[17,37]},"score":5,"packageInfo":{"values":["aff"],"tag":"Package"},"name":"EffectFnCb","moduleName":"Effect.Aff.Compat","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]},"arguments":[["a",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[49,1],"name":".spago/tuples/v5.1.0/src/Data/Tuple/Nested.purs","end":[49,24]},"score":17,"packageInfo":{"values":["tuples"],"tag":"Package"},"name":"T2","moduleName":"Data.Tuple.Nested","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"z"}]},"arguments":[["a",null],["z",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[38,1],"name":".spago/tuples/v5.1.0/src/Data/Tuple/Nested.purs","end":[38,26]},"score":17,"packageInfo":{"values":["tuples"],"tag":"Package"},"name":"Tuple1","moduleName":"Data.Tuple.Nested","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple","Nested"],"T2"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]},"arguments":[["a",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[365,1],"name":".spago/lists/v5.4.1/src/Data/List.purs","end":[365,24]},"score":6,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"reverse","moduleName":"Data.List","info":{"values":[{"type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Reverse a list.\n\nRunning time: `O(n)`\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[237,1],"name":".spago/lists/v5.4.1/src/Data/List.purs","end":[237,22]},"score":6,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"last","moduleName":"Data.List","info":{"values":[{"type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Get the last element in a list, or `Nothing` if the list is empty.\n\nRunning time: `O(n)`.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[230,1],"name":".spago/lists/v5.4.1/src/Data/List.purs","end":[230,22]},"score":6,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"head","moduleName":"Data.List","info":{"values":[{"type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Get the first element in a list, or `Nothing` if the list is empty.\n\nRunning time: `O(1)`.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[191,1],"name":".spago/lists/v5.4.1/src/Data/List/Types.purs","end":[191,31]},"score":6,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"toList","moduleName":"Data.List.Types","info":{"values":[{"type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"NonEmptyList"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[152,1],"name":".spago/lists/v5.4.1/src/Data/List/NonEmpty.purs","end":[152,31]},"score":6,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"init","moduleName":"Data.List.NonEmpty","info":{"values":[{"type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"NonEmptyList"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[149,1],"name":".spago/lists/v5.4.1/src/Data/List/NonEmpty.purs","end":[149,31]},"score":6,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"tail","moduleName":"Data.List.NonEmpty","info":{"values":[{"type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"NonEmptyList"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[124,1],"name":".spago/lists/v5.4.1/src/Data/List/NonEmpty.purs","end":[124,33]},"score":6,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"toList","moduleName":"Data.List.NonEmpty","info":{"values":[{"type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"NonEmptyList"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[406,1],"name":".spago/lists/v5.4.1/src/Data/List/Lazy.purs","end":[406,24]},"score":6,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"reverse","moduleName":"Data.List.Lazy","info":{"values":[{"type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"List"]},{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"List"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Reverse a list.\n\nRunning time: `O(n)`\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[254,1],"name":".spago/lists/v5.4.1/src/Data/List/Lazy.purs","end":[254,22]},"score":6,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"last","moduleName":"Data.List.Lazy","info":{"values":[{"type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"List"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Get the last element in a list, or `Nothing` if the list is empty.\n\nRunning time: `O(n)`.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[248,1],"name":".spago/lists/v5.4.1/src/Data/List/Lazy.purs","end":[248,22]},"score":6,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"head","moduleName":"Data.List.Lazy","info":{"values":[{"type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"List"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Get the first element in a list, or `Nothing` if the list is empty.\n\nRunning time: `O(1)`.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[205,1],"name":".spago/lists/v5.4.1/src/Data/List/Lazy/Types.purs","end":[205,31]},"score":6,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"toList","moduleName":"Data.List.Lazy.Types","info":{"values":[{"type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"NonEmptyList"]},{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"List"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[66,1],"name":".spago/lists/v5.4.1/src/Data/List/Lazy/NonEmpty.purs","end":[66,31]},"score":6,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"init","moduleName":"Data.List.Lazy.NonEmpty","info":{"values":[{"type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"NonEmptyList"]},{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"List"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[63,1],"name":".spago/lists/v5.4.1/src/Data/List/Lazy/NonEmpty.purs","end":[63,31]},"score":6,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"tail","moduleName":"Data.List.Lazy.NonEmpty","info":{"values":[{"type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"NonEmptyList"]},{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"List"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[45,1],"name":".spago/lists/v5.4.1/src/Data/List/Lazy/NonEmpty.purs","end":[45,33]},"score":6,"packageInfo":{"values":["lists"],"tag":"Package"},"name":"toList","moduleName":"Data.List.Lazy.NonEmpty","info":{"values":[{"type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"NonEmptyList"]},{"tag":"TypeConstructor","contents":[["Data","List","Lazy","Types"],"List"]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[20,1],"name":".spago/functors/v3.1.1/src/Data/Functor/Product/Nested.purs","end":[20,26]},"score":2,"packageInfo":{"values":["functors"],"tag":"Package"},"name":"T2","moduleName":"Data.Functor.Product.Nested","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Product"],"Product"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"z"}]},"arguments":[["a",null],["z",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[21,1],"name":".spago/functors/v3.1.1/src/Data/Functor/Coproduct/Nested.purs","end":[21,28]},"score":2,"packageInfo":{"values":["functors"],"tag":"Package"},"name":"C2","moduleName":"Data.Functor.Coproduct.Nested","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Coproduct"],"Coproduct"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"z"}]},"arguments":[["a",null],["z",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[32,1],"name":".spago/either/v4.1.1/src/Data/Either/Nested.purs","end":[32,27]},"score":16,"packageInfo":{"values":["either"],"tag":"Package"},"name":"Either1","moduleName":"Data.Either.Nested","info":{"values":[{"type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","Either","Nested"],"\\/"]},{"tag":"TypeVar","contents":"a"},{"tag":"TypeConstructor","contents":[["Data","Void"],"Void"]}]},"arguments":[["a",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[24,1],"name":".spago/transformers/v4.2.0/src/Control/Monad/Writer.purs","end":[24,35]},"score":7,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"Writer","moduleName":"Control.Monad.Writer","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Writer","Trans"],"WriterT"]},{"tag":"TypeVar","contents":"w"}]},{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]}]},"arguments":[["w",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":"The `Writer` monad is a synonym for the `WriterT` monad transformer, applied\nto the `Identity` monad.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[25,1],"name":".spago/transformers/v4.2.0/src/Control/Monad/State.purs","end":[25,33]},"score":7,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"State","moduleName":"Control.Monad.State","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","State","Trans"],"StateT"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]}]},"arguments":[["s",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":"The `State` monad is a synonym for the `StateT` monad transformer, applied\nto the `Identity` monad.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[22,1],"name":".spago/transformers/v4.2.0/src/Control/Monad/Reader.purs","end":[22,35]},"score":7,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"Reader","moduleName":"Control.Monad.Reader","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Reader","Trans"],"ReaderT"]},{"tag":"TypeVar","contents":"r"}]},{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]}]},"arguments":[["r",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":"The `Reader` monad is a synonym for the `ReaderT` monad transformer, applied\nto the `Identity` monad.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[35,1],"name":".spago/transformers/v4.2.0/src/Control/Monad/Except.purs","end":[35,35]},"score":7,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"Except","moduleName":"Control.Monad.Except","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Except","Trans"],"ExceptT"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]}]},"arguments":[["e",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":"A parametrizable exception monad; computations are either exceptions or\npure values. If an exception is thrown (see `throwError`), the computation\nterminates with that value. Exceptions may also be caught with `catchError`,\nallowing the computation to resume and exit successfully.\n\nThe type parameter `e` is the type of exceptions, and `a` is the type\nof successful results.\n\nA mechanism for trying many different computations until one succeeds is\nprovided via the `Alt` instance, specifically the `(<|>)` function.\nThe first computation to succeed is returned; if all fail, the exceptions\nare combined using their `Semigroup` instance. The `Plus` instance goes\nfurther and adds the possibility of a computation failing with an 'empty'\nexception; naturally, this requires the stronger constraint of a `Monoid`\ninstance for the exception type.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[21,1],"name":".spago/transformers/v4.2.0/src/Control/Monad/Cont.purs","end":[21,31]},"score":7,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"Cont","moduleName":"Control.Monad.Cont","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Cont","Trans"],"ContT"]},{"tag":"TypeVar","contents":"r"}]},{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]}]},"arguments":[["r",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":"The `Cont` monad is a synonym for the `ContT` monad transformer applied to\nthe `Identity` monad.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[21,1],"name":".spago/transformers/v4.2.0/src/Control/Comonad/Traced.purs","end":[21,35]},"score":7,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"Traced","moduleName":"Control.Comonad.Traced","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Comonad","Traced","Trans"],"TracedT"]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]}]},"arguments":[["m",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":"The `Traced` comonad is a synonym for the `TracedT` comonad transformer, applied\nto the `Identity` monad.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[22,1],"name":".spago/transformers/v4.2.0/src/Control/Comonad/Store.purs","end":[22,33]},"score":7,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"Store","moduleName":"Control.Comonad.Store","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Comonad","Store","Trans"],"StoreT"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]}]},"arguments":[["s",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":"The `Store` comonad is a synonym for the `StoreT` comonad transformer, applied\nto the `Identity` monad.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[24,1],"name":".spago/transformers/v4.2.0/src/Control/Comonad/Env.purs","end":[24,29]},"score":7,"packageInfo":{"values":["transformers"],"tag":"Package"},"name":"Env","moduleName":"Control.Comonad.Env","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Comonad","Env","Trans"],"EnvT"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]}]},"arguments":[["e",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":"The `Env` comonad is a synonym for the `EnvT` comonad transformer, applied\nto the `Identity` monad.\n"}],"tag":"SearchResult"}]